<!-- Modal -->
<div class="modal" id="appToolModal" >
  <div role="document" style="margin: 1.75rem auto; min-width:580px; max-width:40%"> <!-- class="modal-dialog"  -->
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="appToolModalLabel">App tools</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <h4 class="text-center" id="packageName"></h4>
        <hr/>
        <div class="card-body" id="configsCard" style="display: none">
          <div class="form-group">
            <label class="mb-1" for="app_user_name">
              <h6 class="card-title mb-0">User/Multiplayer name</h6>
              <small class="card-text">
                Just rename, without account id reseting
              </small>
            </label>
            <input id="app_user_name" class="adbdev form-control" value="" />
          </div>
          <hr/>
        </div>
        <div class="card-body text-center">
          <a class="adbdev btn btn-info" id="backupAppBtn" ><i class="fa fa-download"></i> Backup app + obbs</a>
          <a class="adbdev btn btn-info" id="backupDataBtn"><i class="fa fa-download"></i> Backup appdata</a><br/>
          <a class="adbdev btn btn-success disabled" id="restoreDataBtn"><i class="fa fa-upload"></i> Restore appdata</a>
          <a class="btn btn-primary disabled" id="backupAppPath"><i class="fa fa-folder-open"></i> Open backup folder</a>
        </div>
        <div style="min-height: 45px">
          <small class="transfer_state" ></small>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<script>
  console.log('ONLOAD APPTOOL MODAL');

  ipcRenderer.removeAllListeners('process_data');
  ipcRenderer.on('process_data', (event, data) => {
    console.log('process_data received', data);
    if (!data)  return $('.transfer_state').text('');

    let line = `${data.cmd}: ${formatBytes(data.bytes)}`;
    if (data.size) {
      line+= ` of ${formatBytes(data.size)} (${data.percentage}%)`;
    }

    if (data.speedAvg) {
      line+= ` - ${formatBytes(data.speedAvg)}/s (${formatEta(data.eta)})`;
    }

    const name = data.name.split('/').pop();
    $('.transfer_state').html(`${line}<br/> ${name}`);
  });


  ipcRenderer.removeAllListeners('data_backup');
  ipcRenderer.on('data_backup', (event, arg) => {
    $('#backupDataBtn').removeClass('disabled');
    /*if (arg.error) {
      return $('#transfer_state').html(`<b class="text-danger">Error: ${arg.error}</b>`);
    }

    loadInclude('modals/app_tools.twig', 'apptoolsmodaldiv', () => {
      ipcRenderer.send('app_tools', arg.package);
    });*/
  });

  ipcRenderer.removeAllListeners('app_tools');
  ipcRenderer.on('app_tools', (event, arg) => {
    console.log('app_tools msg came: ', arg);
    $('#processingModal').modal('hide');

    const {
      package,
      backupPath,
      availableRestore,
      availableConfig,
    } = arg;

    $('#packageName').text(package);

    $('#backupDataBtn').click(({target}) => {
      target.classList.add('disabled');
      ipcRenderer.send('data_backup', package);
      return true;
    });
    $('#restoreDataBtn').click((e) => {
      ipcRenderer.send('data_restore', package);
      return true;
    });
    $('#backupAppPath').click((e) => {
      shell.openPath(path.join(remote.getGlobal('sidenoderHome'), 'backup_data', package));
      return true;
    });

    if (availableRestore) {
      $('#backupAppPath').removeClass('disabled');
      $('#restoreDataBtn')
        .removeClass('disabled')
        .append(`(${new Date(+availableRestore).toLocaleString()})`);
    }

    if (availableConfig) {
      $('#configsCard').show();
      $('#app_user_name')
      .val(availableConfig.username)
      .change((e) => {
        ipcRenderer.send('app_config_set', { package,  data: { username: e.target.value }});
        return true;
      });
    }

    $('#appToolModal').modal('show');
  });
  /*ipcRenderer.on('start_activity', (event, arg) => {
    console.log('start_activity msg came: ', arg); // prints "ping"
    $('#appToolModal').modal('hide');
  });*/

  /*$('#startActivityButton').on('click', function(){
    $('#appToolModal').modal('hide');
    ipcRenderer.send('start_activity', $('#appActivities').val());
  });*/
</script>