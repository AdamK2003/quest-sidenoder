<!doctype html>
<html lang="en">
<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <script>window.$ = window.jQuery = require('jquery');</script>
  <!-- <script src="https://unpkg.com/@popperjs/core@2" crossorigin="anonymous"></script> -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" crossorigin="anonymous"></script> -->
  <script src="js/bootstrap.min.js"></script>
  <script src="js/main.js"></script>

  <!-- Bootstrap CSS -->
  <!-- <link rel="stylesheet" href="css/bootstrap.min.css" crossorigin="anonymous"> -->

  <link rel="stylesheet" href="css/bootstrap-slate.min.css">
  <!-- <link rel="stylesheet" href="https://bootswatch.com/4/sandstone/bootstrap.min.css"> -->
  <link rel="stylesheet" href="css/font-awesome.min.css">
  <link rel="stylesheet" href="css/main.css">

  <title>Quest-Sideloader</title>

  <script>
    const electron = window.require('electron');
    const { ipcRenderer, remote, shell } = electron;
    const { dialog } = remote;

    function loadInclude(template, id = null, complete = null) {
      if (!id) {
        $id('mainbody')
          // .html('')
          .load(template, complete);
      }
      else {
        $(`#${id}`).load(template, complete);
      }
    }

    function formatEta(seconds) {
      if (seconds == null) { return 'Starting...'; }
      hours = Math.floor(seconds / 3600);
      seconds -= hours * 3600;
      minutes = Math.floor(seconds / 60);
      seconds -= minutes * 60;
      if (hours > 0) {
        return hours + 'h ' + minutes + 'm ' + seconds + 's';
      }
      else if (minutes > 0) {
        return minutes + 'm ' + seconds + 's';
      }
      else {
        return seconds + 's';
      }
    }

    function formatBytes(bytes) {
      const sizes = ['b', 'Kb', 'Mb', 'Gb', 'Tb'];
      if (bytes == 0) return '0 b';

      const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
      return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
    }

    // screenhot stuff
    /*async function makeScreenshot(selector = 'body') {
      return new Promise((resolve, reject) => {
        let node = document.querySelector(selector);
        html2canvas(node, {
          onrendered: (canvas) => {
            let pngUrl = canvas.toDataURL();
            resolve(pngUrl);
          }, allowTaint: true
        });
      });
    }

    async function report() {
      const screenshot = await makeScreenshot(); // png dataUrl
      console.log(screenshot)
      const fs = require('fs');
      const base64Data = screenshot.replace(/^data:([A-Za-z-+/]+);base64,/, '');
      fs.writeFile('outt.png', base64Data, 'base64', (err) => {
        console.log(err);
      });
    }*/
  </script>
</head>
<body>

<nav class="navbar navbar-expand-md" style="padding: 10px">

  <img src="quest-sidenoder-light.svg" width="60" height="50" alt="" style="margin-right: 20px">

  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  {% block navbar %}
  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item">
        <a class="btn btn-primary" style="margin-right: 5px"  onclick="loadInclude('browse_include.twig', null, () => ipcRenderer.send('get_dir', ''));">
          <i class="fa fa-folder-open-o"></i>
            Browse
        </a>
      </li>
      <li class="nav-item">
        <a id="remotebtn" class="disabled btn btn-info" style="margin-right: 5px"  onclick="loadInclude('browse_include.twig', null, () => ipcRenderer.send('get_dir', remote.getGlobal('mountFolder')));">
          <i class="fa fa-folder-open-o"></i>
            Remote
        </a>
      </li>
      <li class="nav-item">
        <a class="adbdev btn btn-primary disabled" style="margin-right: 5px" onclick="loadInclude('installed_include.twig')" title="Installed APP's">
          <i class="fa fa-list"></i>
           Installed
        </a>
      </li>
      <li class="nav-item">
        <a class="adbdev btn btn-primary" style="margin-right: 5px"  onclick="loadInclude('tweaks_include.twig')" title="Device tweaks">
          <i class="fa fa-bug"></i>
        </a>
      </li>
      <li class="nav-item">
        <a class="btn btn-primary" style="margin-right: 5px"  onclick="loadInclude('settings_include.twig')" title="Settings">
          <i class="fa fa-cog"></i>
        </a>
      </li>
    </ul>

    <div class="form-inline my-2 my-lg-0">
      <span type="button"  id="mountbtn" onclick="checkMount()" class="btn btn-sm btn-danger" disabled>
        <i id="mountrefresh" class="fa fa-refresh"></i> | MOUNT:</br>DISCONNECTED
      </span>
      &nbsp;
      <span type="button" id="devicebtn" class="btn btn-sm btn-danger"  disabled>
        <i class="fa fa-spin fa-refresh"></i> | DEVICE:</br>DISCONNECTED
      </span>
      &nbsp;
      <span type="button" id="wirelessbtn" onclick="connectWireless()" class="btn btn-sm btn-danger"  disabled>
        <i id="wirelessrefresh" class="fa fa-refresh"></i> | WIRELESS:</br>DISCONNECTED
      </span>
    </div>
  </div>
  {% endblock %}
</nav>


<div style="padding: 5px 20px">
  <div id="device_infoDiv"></div>

  {% block body %}{% endblock %}
</div>

<footer class="footer text-center">
  <hr>
  <b>SideNoder v{{ version }}</b>
  <a class="btn btn-sm btn-info" onclick="$id('donateModal').modal('show')"><i class="fa fa-usd"></i> Donate</a>
  <br>
  https://github.com/vKolerts/quest-sidenoder
</footer>

<!-- modals -->
<div id="sideloadmodaldiv"></div>
<div id="appinfomodaldiv"></div>
<div id="confirmmodaldiv"></div>
<div id="processingmodaldiv"></div>
<div id="appstartmodaldiv"></div>
<div id="apptoolsmodaldiv"></div>
<div id="scrcpymodaldiv"></div>
<div id="donatemodaldiv"></div>


<script>
  loadInclude('device_info.twig', 'device_infoDiv');
  loadInclude('modals/appinfo.twig', 'appinfomodaldiv');
  loadInclude('modals/confirm.twig', 'confirmmodaldiv');
  loadInclude('modals/processing.twig', 'processingmodaldiv');
  loadInclude('modals/app_start.twig', 'appstartmodaldiv');
  loadInclude('modals/scrcpy.twig', 'scrcpymodaldiv');
  loadInclude('modals/donate.twig', 'donatemodaldiv');

  document.ondragover = document.ondrop = (ev) => {
    ev.preventDefault();
  }

  document.body.ondrop = (ev) => {
    ev.preventDefault();
    if (!ev.dataTransfer.files || !ev.dataTransfer.files.length) return;

    if (ev.dataTransfer.files[0].path.endsWith('.apk')) {
      ipcRenderer.send('filedrop', ev.dataTransfer.files[0].path.replace(/\\/g, '/'));
    }
  }

  // actions

  function checkMount() {
    $id('mountrefresh').addClass('fa-spin');
    $id('mountbtn')
      .removeClass('btn-danger')
      .removeClass('btn-success')
      .addClass('btn-warning');
    $id('remotebtn').addClass('disabled');
    ipcRenderer.send('mount', 'bla');
  }

  function connectWireless() {
    $id('wirelessrefresh').addClass('fa-spin');
    $id('wirelessbtn')
      .removeClass('btn-danger')
      .addClass('btn-warning');
    ipcRenderer.send('connect_wireless', '');
  }
  function disconnectWireless() {
    $id('wirelessrefresh').addClass('fa-spin');
    $id('wirelessbtn')
      .removeClass('btn-success')
      .addClass('btn-warning');
    ipcRenderer.send('disconnect_wireless', '');
  }

  // events


  ipcRenderer.on('log', (event, arg) => {
    console.log('log came');
    console.log(arg);
  });

  ipcRenderer.on('notify_update', (event, arg) => {
    console.log('notify_update msg came ! ');
    dialog.showMessageBox(null, {
      type: 'info',
      buttons: ['Cancel', 'Download'],
      title: `Update available ${arg.current} to ${arg.remote}`,
      message: `sidenoder-${arg.remote} is now available on github.`,
      detail: arg.description,
    })
    .then(({ response }) => {
      if (response === 1) shell.openExternal(arg.url);
    })
  });

  //edit btn on top
  ipcRenderer.on('check_mount', (event, arg) => {
    console.log('check_mount responded: ', arg); // prints "ping"
    if (arg.success) {
      $id('mountrefresh').removeClass('fa-spin');
      $id('mountbtn')
        .removeClass('btn-warning')
        .removeClass('btn-danger')
        .addClass('btn-success')
        .html(`<i id="mountrefresh" class="fa fa-check-circle-o"></i> | MOUNT:</br>CONNECTED`);
      $id('remotebtn').removeClass('disabled');

      if (!remote.getGlobal('adbDevice')) return;

      $id('updateBadge').removeClass('disabled');
    }
    else {
      $id('mountrefresh').removeClass('fa-spin');
      $id('mountbtn')
        .removeClass('btn-success')
        .removeClass('btn-warning')
        .addClass('btn-danger')
        .html(`<i id="mountrefresh" class="fa fa-refresh"></i> | MOUNT:</br>DISCONNECTED`);
      $id('remotebtn').addClass('disabled');

      $id('updateBadge').addClass('disabled');

      if (arg.error)
        dialog.showMessageBox(null, {
          type: 'error',
          buttons: ['Ok'],
          title: 'RCLONE MOUNT FAILED',
          message: 'Rclone failed on mount command',
          detail: arg.error.toString(),
        });
    }
  });

  ipcRenderer.on('check_device', (event, arg) => {
    console.log('check_device msg:', arg);

    if (!!arg.success) {
      console.log('GETDEVICE SUCESS');
      $id('devicebtn')
        .removeClass('btn-danger')
        .addClass('btn-success')
        .html(`<i class="fa fa-check-circle-o"></i> | DEVICE:</br>CONNECTED`);

      $('a.adbdev').removeClass('disabled');
      if (!remote.getGlobal('mounted')) {
        $id('updateBadge').addClass('disabled');
      }

      if (arg.success.endsWith(':5555')) {
        id('wirelessbtn').onclick = disconnectWireless;
        $id('wirelessbtn')
          .removeClass('btn-danger')
          .addClass('btn-success')
          .html(`<i id="wirelessrefresh" class="fa fa-check-circle-o"></i> | WIRELESS:</br>CONNECTED`);
      }

      ipcRenderer.send('get_device_info', '');
      ipcRenderer.send('mp_name', { cmd: 'get' });
    }
    else {
      $id('devicebtn')
        .removeClass('btn-success')
        .addClass('btn-danger')
        .html(`<i class="fa fa-refresh fa-spin"></i> | DEVICE:</br>DISCONNECTED`);

      $('a.adbdev').addClass('disabled');

      id('wirelessbtn').onclick = connectWireless;
      $id('wirelessbtn')
        .removeClass('btn-success')
        .addClass('btn-danger')
        .html(`<i id="wirelessbtnrefresh" class="fa fa-refresh"></i> | WIRELESS:</br>DISCONNECTED`);
    }
  });

  ipcRenderer.on('connect_wireless', (event, arg) => {
    console.log('check_wireless msg came FROM BE to fe:', arg);
    $id('wirelessrefresh').removeClass('fa-spin');

    if (arg.success) {
      console.log('WIRELESS CONNECTED');
      id('wirelessbtn').onclick = disconnectWireless;
      $id('wirelessbtn')
        .removeClass('btn-danger')
        .addClass('btn-success')
        .html(`<i id="wirelessrefresh" class="fa fa-check-circle-o"></i> | WIRELESS:</br>CONNECTED`);

      dialog.showMessageBox(null, {
        type: 'info',
        buttons: ['Ok'],
        title: 'Device connected by TCP',
        message: 'Now you can unplug USB cable and continue used the programm by wireless connection',
      })
    }
    else {
      id('wirelessbtn').onclick = connectWireless;
      $id('wirelessbtn')
        .removeClass('btn-success')
        .addClass('btn-danger')
        .html(`<i id="wirelessbtnrefresh" class="fa fa-refresh"></i> | WIRELESS:</br>DISCONNECTED`);
    }
  });

  ipcRenderer.on('ask_device', (event, arg) => {
    console.log('ask_device msg came ! ');
    $id('processingModal').modal('hide');
    dialog.showMessageBox(null, {
      type: 'info',
      buttons: ['Understood'],
      title: 'Missing device',
      message: `This action cannot be performed without a device attached.`,
    });
  });
</script>
<script src="browse.js"></script>
<script src="installed.js"></script>

</body>
</html>

