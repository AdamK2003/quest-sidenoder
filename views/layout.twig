<!doctype html>
<html lang="en">
<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


  <script>window.$ = window.jQuery = require('jquery');</script>

  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>



  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="https://bootswatch.com/4/slate/bootstrap.min.css">
  <!-- <link rel="stylesheet" href="https://bootswatch.com/4/sandstone/bootstrap.min.css"> -->

  <title>Quest-Sideloader</title>

  <style>
    a { cursor: pointer; }
    .btn {
      text-shadow: none;
      font-weight: bold;
    }
    .btn-success {
      background: #7C4;
    }
    .btn-success:hover {
      background: #46ba46;
    }
    .btn-danger {
      background: #ec4d49;
    }
    .btn-danger:hover {
      background: #e8241f;
    }
    .btn-info {
      background: #49b;
    }
    .btn-info:hover {
      background: #28b;
    }
    .badge {
      text-shadow: none;
    }
    .badge-success {
      background: #5a4;
    }

    .footer {
      position: absolute;
      bottom: 0;
      width: 100%;
      padding: 15px;
    }
    html {
      position: relative;
      min-height: 100%;
    }
    body {
      margin-bottom: 120px;
    }
  </style>

  <script>
    const electron = window.require('electron');
    const { ipcRenderer, remote, shell } = electron;
    const { dialog } = remote;

    function loadInclude(template, id = null) {
      if (!id) {
        $('#mainbody').html('');
        $('#mainbody').load(template);
      }
      else {
        $(`#${id}`).load(template);
      }
    }
  </script>

  <script src="browse.js"></script>
  <script src="installed.js"></script>

  <script>

    $(function() {
      loadInclude('modals/sideload.twig', 'sideloadmodaldiv');
      loadInclude('modals/confirm.twig', 'confirmmodaldiv');
      loadInclude('modals/processing.twig', 'processingmodaldiv');
      loadInclude('modals/app_start.twig', 'appstartmodaldiv');

      document.ondragover = document.ondrop = (ev) => {
        ev.preventDefault()
      }

      document.body.ondrop = (ev) => {
        if (ev.dataTransfer.files[0].path.endsWith(".apk")) {
          ipcRenderer.send('filedrop', ev.dataTransfer.files[0].path.replace(/\\/g,"/"));
        }
        ev.preventDefault()
      }
    });

    ipcRenderer.on('get_device_info', (event, arg) => {
      console.log('get_device_info ! ', arg);
      const {
        storage,
        user,
        fw,
        battery,
      } = arg;
      if (storage) {
        let bg = 'success';
        let percent = +storage.percent.replace('%', '');
        if (percent > 80) bg = 'warning';
        if (percent > 95) bg = 'danger';

        $('#storageDiv').html(`
        <span class="pull-left push-left">Size: ${storage.size}</span>
        <span class="pull-right push-right">Available: ${storage.free}</span>
        <center>Used: ${storage.used}(${storage.percent})</center>
        <div class="progress" style="border: 1px solid #666;">
          <div class="progress-bar progress-bar-striped bg-${bg}" role="progressbar" style="width: ${storage.percent};" aria-valuenow="${percent}" aria-valuemin="0" aria-valuemax="100"></div>
        </div>`)
      }

      if (user) {
        $('#deviceUserName').html(user.name);
      }

      if (fw) {
        $('#deviceFwVersion').html(fw.version);
      }

      if (battery) {
        $('#deviceBatteryLevel').html(battery.level);
      }
    });

    ipcRenderer.on('notify_update', (event, arg) => {
      console.log('notify_update msg came ! ');
      dialog.showMessageBox(null, {
        type: 'info',
        buttons: ['Cancel', 'Download'],
        title: `Update available ${arg.current} to ${arg.remote}`,
        message: `sidenoder-${arg.remote} is now available on github.`,
        detail: arg.description,
      })
      .then(({ response }) => {
        if (response === 1) shell.openExternal(arg.url);
      })
    });

    ipcRenderer.on('ask_sideload', (event, arg) => {
      console.log('ask_sideload msg came ! ');
      const { success, path, update } = arg;
      if (!success) return;

      const lastslashindex = path.lastIndexOf('/');
      const file= path.substring(lastslashindex  + 1);

      $('#confirmSideloadButton').data('path', path);
      $('#confirmSideloadButton').data('update', !!update);
      $('#confirmModalBody').html('Do you want to sideload: <br><b>' + file + '</b>');
      $('#confirmModal').modal('show');
    });


    ipcRenderer.on('start_sideload', (event, arg) => {
      console.log('start_sideload msg came ! ');
      console.log(arg);
      const { success, path } = arg;
      if (!success) return;

      const lastslashindex = path.lastIndexOf('/');
      const file= path.substring(lastslashindex  + 1)

      $('#sideloadModal').modal('show');
      $('#sideloadModal > div > div > div.modal-body > #sideloadText').html('Processing: <br><b>'+file+'</b>')
    });

    ipcRenderer.on('sideload_aapt_done', (event, arg) => {
      $('.aaptDoneBadge').removeClass('badge-warning').addClass('badge-success');
      ipcRenderer.send('get_device_info', '');
    });
    ipcRenderer.on('sideload_check_done', (event, arg) => {
      $('.checkDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_backup_done', (event, arg) => {
      $('.backupDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_uninstall_done', (event, arg) => {
      $('.uninstallDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_restore_done', (event, arg) => {
      $('.restoreDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_download_done', (event, arg) => {
      $('.downloadDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_apk_done', (event, arg) => {
      $('.apkDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_copy_obb_done', (event, arg) => {
      $('.copyObbDoneBadge').removeClass('badge-warning').addClass('badge-success');
      $('.downloadObbDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_move_obb_done', (event, arg) => {
      $('.moveObbDoneBadge').removeClass('badge-warning').addClass('badge-success');
    });
    ipcRenderer.on('sideload_done', (event, arg) => {
      console.log('sideload done received', arg);
      if (arg.success) {
        $('.sideloadDoneBadge').removeClass('badge-warning').addClass('badge-success');
        $('#sideloadDoneBtn').removeClass('disabled').removeClass('btn-primary').addClass('btn-success').html('Done');
        $('#sideloadRefresh').removeClass('fa-refresh').removeClass('fa-spin').addClass('fa-check-circle-o');
      }

      if (arg.update === true) {
        getUpdates();
      }
    });

    function checkMount() {
      $('#mountrefresh').addClass('fa-spin');
      $('#mountbtn').removeClass('btn-danger');
      $('#mountbtn').addClass('btn-warning');
      ipcRenderer.send('mount', 'bla');
    }

    ipcRenderer.on('log', (event, arg) => {
      console.log('log came');
      console.log(arg);
    });

    // edit btn on browse page
    ipcRenderer.on('check_mount', (event, {success}) => {
      if (!success) return;

      $('#mountBadge').removeClass('btn-warning');
      $('#mountBadge').addClass('btn-info');
      $('#mountBadge').html(`<i id="mountrefresh" class="fa fa-plug"></i> Click to browse mount`);

    // edit btn on installed apps page
      $('#updateBadge').removeClass('btn-danger');
      $('#updateBadge').addClass('btn-info');
      $('#updateBadge').html(`<i class="fa fa-search" aria-hidden="true"></i> Click to check mount for updates`);
    });

    //edit btn on top
    ipcRenderer.on('check_mount', (event, arg) => {
      console.log('check_mount responded: ', arg); // prints "ping"
      if (arg.success) {
        $('#mountrefresh').removeClass('fa-spin');
        $('#mountbtn').removeClass('btn-warning');
        $('#mountbtn').removeClass('btn-danger');
        $('#mountbtn').addClass('btn-success');
        $('#mountbtn').html(`<i id="mountrefresh" class="fa fa-check-circle-o"></i> | MOUNT STATUS:</br>CONNECTED`);
        $('#mountbtn').onclick = function() {return false;}
      }
      else {
        $('#mountrefresh').removeClass('fa-spin');
        $('#mountbtn').removeClass('btn-success');
        $('#mountbtn').addClass('btn-danger');
      }
    });

    ipcRenderer.on('check_device', (event, arg) => {
      console.log('get_device msg came FROM BE to fe:', arg);

      if (!!arg.success) {
        console.log('GETDEVICE SUCESS');
        $('#devicebtn').removeClass('btn-danger');
        $('#devicebtn').addClass('btn-success');
        $('#devicebtn').html(`<i class="fa fa-check-circle-o"></i> | QUEST STATUS:</br>CONNECTED`);

        $('.deviceBadge').removeClass('badge-warning');
        $('.deviceBadge').addClass('badge-success');

        $('#installedAppsNav').removeClass('disabled');
        $('#installedAppsNav').removeClass('btn-secondary');
        $('#installedAppsNav').addClass('btn-primary');
        ipcRenderer.send('get_device_info', '');

        if (arg.success.endsWith(':5555')) {
          $('#wirelessbtn')[0].onclick = disconnectWireless;
          $('#wirelessbtn').removeClass('btn-danger');
          $('#wirelessbtn').addClass('btn-success');
          $('#wirelessbtn').html(`<i id="wirelessrefresh" class="fa fa-check-circle-o"></i> | WIRELESS STATUS:</br>CONNECTED`);
        }
      }
      else {
        $('#devicebtn').removeClass('btn-success');
        $('#devicebtn').addClass('btn-danger');
        $('#devicebtn').html(`<i class="fa fa-refresh fa-spin"></i> | QUEST STATUS:</br>DISCONNECTED`);

        //$("#installedAppsNav").addClass("disabled");

        $('#wirelessbtn')[0].onclick = connectWireless;
        $('#wirelessbtn').removeClass('btn-success');
        $('#wirelessbtn').addClass('btn-danger');
        $('#wirelessbtn').html(`<i id="wirelessbtnrefresh" class="fa fa-refresh"></i> | WIRELESS STATUS:</br>DISCONNECTED`);
      }
    });

    function connectWireless() {
      $('#wirelessrefresh').addClass('fa-spin');
      $('#wirelessbtn').removeClass('btn-danger');
      $('#wirelessbtn').addClass('btn-warning');
      ipcRenderer.send('connect_wireless', '');
    }
    function disconnectWireless() {
      $('#wirelessrefresh').addClass('fa-spin');
      $('#wirelessbtn').removeClass('btn-success');
      $('#wirelessbtn').addClass('btn-warning');
      ipcRenderer.send('disconnect_wireless', '');
    }

    ipcRenderer.on('connect_wireless', (event, arg) => {
      console.log('check_wireless msg came FROM BE to fe:', arg);
      $('#wirelessrefresh').removeClass('fa-spin');

      if (arg.success) {
        console.log('WIRELESS CONNECTED');
        $('#wirelessbtn')[0].onclick = disconnectWireless;
        $('#wirelessbtn').removeClass('btn-danger');
        $('#wirelessbtn').addClass('btn-success');
        $('#wirelessbtn').html(`<i id="wirelessrefresh" class="fa fa-check-circle-o"></i> | WIRELESS STATUS:</br>CONNECTED`);

        dialog.showMessageBox(null, {
          type: 'info',
          buttons: ['Ok'],
          title: 'Device connected by TCP',
          message: 'Please, unplug USB cable for continue used the programm',
        })
      }
      else {
        $('#wirelessbtn')[0].onclick = connectWireless;
        $('#wirelessbtn').removeClass('btn-success');
        $('#wirelessbtn').addClass('btn-danger');
        $('#wirelessbtn').html(`<i id="wirelessbtnrefresh" class="fa fa-refresh"></i> | WIRELESS STATUS:</br>DISCONNECTED`);
      }
    });
    // screenhot stuff
    async function makeScreenshot(selector = 'body') {
      return new Promise((resolve, reject) => {
        let node = document.querySelector(selector);
        html2canvas(node, {
          onrendered: (canvas) => {
            let pngUrl = canvas.toDataURL();
            resolve(pngUrl);
          }, allowTaint: true
        });
      });
    }

    async function report() {
      const screenshot = await makeScreenshot(); // png dataUrl
      console.log(screenshot)
      const fs = require('fs');
      const base64Data = screenshot.replace(/^data:([A-Za-z-+/]+);base64,/, '');
      fs.writeFile('outt.png', base64Data, 'base64', (err) => {
        console.log(err);
      });
    }
  </script>



  {% block onload %}
    <script>
      $(document).ready(function() {


        // dialog.showMessageBox(null, {
        //   type: 'info',
        //   //buttons: ['Cancel', 'Yes, please', 'No, thanks'],
        //   //defaultId: 2,
        //   title: 'Update availablee',
        //   message: 'A',
        //   detail: 'It does not really matter',
        //   checkboxLabel: 'Remember my answer',
        //   checkboxChecked: true,
        // })




        console.log('ONLOAD');
        ipcRenderer.send('check_mount', 'bla');
        //checkMount()
        ipcRenderer.send('check_device', 'bla');

        console.log('setup ask device listener')
        ipcRenderer.on('ask_device', (event, arg) => {
          console.log('ask_device msg came ! ');
          dialog.showMessageBox(null, {
            type: 'info',
            buttons: ['Understood'],
            title: 'Missing device',
            message: `This action cannot be performed without a device attached.`,
          })
        });


        ipcRenderer.on('rclone_data', (event, data) => {
          // console.log('rclone_data received', data);
          if(data.transferring && data.transferring.length > 0) {
            const transferring = data.transferring[0];
            let name = transferring.name.split('/').pop();
            $('.mountcopystatus').html(`${formatBytes(transferring.bytes)} of ${formatBytes(transferring.size)} (${transferring.percentage}%) - ${formatBytes(transferring.speedAvg)}/s (${formatEta(transferring.eta)})<br/> <small>${name}</small>`);
          }
          else {
            $('.mountcopystatus').text('');
          }
        });

      });
    </script>
  {% endblock %}

</head>
<body>

<nav class="navbar navbar-expand-md" style="padding: 10px">

{#  <a class="navbar-brand" href="index.twig">Q-S-L</a>#}

  <img src="quest-sidenoder-light.svg" width="60" height="50" alt="" style="margin-right: 20px">

  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  {% block navbar %}
  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      {#
      <li class="nav-item active">
        <a class="nav-link" href="/home">Home <span class="sr-only">(current)</span></a>
      </li>
      #}
      <li class="nav-item">
        <a class="btn btn-primary" style="margin-right: 20px"  onclick="loadInclude('browse_include.twig');">
          <i class="fa fa-folder-open-o" aria-hidden="true"></i>
            Browse
        </a>
      </li>
      <li class="nav-item">
        <a id="installedAppsNav" class="btn btn-secondary disabled" style="margin-right: 20px" onclick="loadInclude('installed_include.twig')">
          <i class="fa fa-list" aria-hidden="true"></i>
           Installed APP's
        </a>
      </li>
      <li class="nav-item">
        <a class="btn btn-primary" style="margin-right: 20px"  onclick="loadInclude('settings_include.twig')">
          <i class="fa fa-cog" aria-hidden="true"></i>
           Settings
        </a>
      </li>
      <li class="nav-item" style="display: none">
        <a class="btn btn-primary" data-toggle="collapse" href="#collapseTweaks" role="button" aria-expanded="false" aria-controls="collapseTweaks">
          <i class="fa fa-bug" aria-hidden="true"></i> Tweaks
        </a>
      </li>

    </ul>
    <div class="form-inline my-2 my-lg-0">
      <span type="button"  id="mountbtn" onclick="checkMount()" class="btn btn-sm btn-danger" disabled>
        <i id="mountrefresh" class="fa fa-refresh"></i> | MOUNT STATUS:</br>DISCONNECTED
      </span>
      &nbsp;
      <span type="button" id="devicebtn" class="btn btn-sm btn-danger"  disabled>
        <i class="fa fa-spin fa-refresh"></i> | QUEST STATUS:</br>DISCONNECTED
      </span>
      &nbsp;
      <span type="button" id="wirelessbtn" onclick="connectWireless()" class="btn btn-sm btn-danger"  disabled>
        <i id="wirelessrefresh" class="fa fa-refresh"></i> | WIRELESS STATUS:</br>DISCONNECTED
      </span>
    </div>
  </div>
  {% endblock %}
</nav>


<div style="padding: 5px 20px">
  <div class="collapse" id="collapseTweaks">
    <div class="card card-body">
      <input id="mp_name" value="" disabled="disabled" />
      <label for="mp_name">Multiplayer name</label>
    </div>
  </div>
  {% block body %}{% endblock %}
</div>

<footer class="footer text-center">
  <hr>
  <b>SideNoder v{{ version }}</b>
  <br>
  This fork https://github.com/vKolerts/quest-sidenoder
  <br>
  Main repository https://github.com/whitewhidow/quest-sidenoder
</footer>


<div id="sideloadmodaldiv"></div>
<div id="confirmmodaldiv"></div>
<div id="processingmodaldiv"></div>
<div id="appstartmodaldiv"></div>





<!--
 Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script>


  function formatEta(seconds) {
    if (seconds == null) { return 'Starting...'; }
    hours = Math.floor(seconds / 3600);
    seconds -= hours * 3600;
    minutes = Math.floor(seconds / 60);
    seconds -= minutes * 60;
    if (hours > 0) {
      return hours + 'h ' + minutes + 'm ' + seconds + 's';
    }
    else if (minutes > 0) {
      return minutes + 'm ' + seconds + 's';
    }
    else {
      return seconds + 's';
    }
  }

  function formatBytes(bytes) {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (bytes == 0) return '0 B';

    const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
  }

</script>
</body>
</html>

