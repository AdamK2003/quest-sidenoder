{% extends 'layout.twig' %}


{% block onload %}
  {{ parent() }}
  <style>

    .ribbon-wrapper-green {
      width: 85px;
      height: 88px;
      overflow: hidden;
      position: absolute;
      top: -3px;
      right: -3px;
    }

    .ribbon-green {
      font: bold 15px Sans-Serif;
      color: #333;
      text-align: center;
      text-shadow: rgba(255,255,255,0.5) 0px 1px 0px;
      -webkit-transform: rotate(45deg);
      -moz-transform:    rotate(45deg);
      -ms-transform:     rotate(45deg);
      -o-transform:      rotate(45deg);
      position: relative;
      padding: 7px 0;
      left: -5px;
      top: 15px;
      width: 120px;
      background-color: #BFDC7A;
      background-image: -webkit-gradient(linear, left top, left bottom, from(#BFDC7A), to(#8EBF45));
      background-image: -webkit-linear-gradient(top, #BFDC7A, #8EBF45);
      background-image:    -moz-linear-gradient(top, #BFDC7A, #8EBF45);
      background-image:     -ms-linear-gradient(top, #BFDC7A, #8EBF45);
      background-image:      -o-linear-gradient(top, #BFDC7A, #8EBF45);
      color: #6a6340;
      -webkit-box-shadow: 0px 0px 3px rgba(0,0,0,0.3);
      -moz-box-shadow:    0px 0px 3px rgba(0,0,0,0.3);
      box-shadow:         0px 0px 3px rgba(0,0,0,0.3);
    }

    .ribbon-green:before, .ribbon-green:after {
      content: "";
      border-top:   3px solid #6e8900;
      border-left:  3px solid transparent;
      border-right: 3px solid transparent;
      position:absolute;
      bottom: -3px;
    }

    .ribbon-green:before {
      left: 0;
    }
    .ribbon-green:after {
      right: 0;
    }​


  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
  <script>


    async function  makeScreenshot(selector="body")
    {
      return new Promise((resolve, reject) => {
        let node = document.querySelector(selector);

        html2canvas(node, { onrendered: (canvas) => {
            let pngUrl = canvas.toDataURL();
            resolve(pngUrl);
          }, allowTaint : true});
      });
    }

    async function report() {
      let screenshot = await makeScreenshot(); // png dataUrl
      let img = document.querySelector(".screen");
      img.src = screenshot;
      var a = document.createElement("a"); //Create <a>
      a.href = screenshot; //Image Base64 Goes here
      a.download = "Image.png"; //File name Here
      console.log(screenshot)

      var fs = require("fs");

      const base64Data = screenshot.replace(/^data:([A-Za-z-+/]+);base64,/, '');
      fs.writeFile("outt.png", base64Data, 'base64', (err) => {
        console.log(err);
      });
      //a.click();
      // ... show screenshot to user, allow to draw region
      // and send screnshot with region coordinates to server
    }
  </script>
  <script>

    function fixIcons(){
      $( ".browse-folder" ).hover(
              function() {
                console.log("HOVER");
                $(this).find( "i" ).removeClass("fa-folder-o")
                $(this).find( "i" ).addClass("fa-folder-open-o")
              }, function() {
                $(this).find( "i" ).addClass("fa-folder-o")
                $(this).find( "i" ).removeClass("fa-folder-open-o")
              }
      );
    }


    $(document).ready(function() {
      console.log("ONLOAD BROWSE");
      //open start dir
      ipcRenderer.send('get_dir', '');








      function findString(str) {
        var strFound;
        strFound = self.find(str);
        if (strFound && self.getSelection && !self.getSelection().anchorNode) {
          strFound = self.find(str)
        }
        if (!strFound) {
          strFound = self.find(str, 0, 1)
          while (self.find(str, 0, 1)) continue
        }
        if (!strFound) alert("String '" + str + "' not found!")
        return;
      };
      document.getElementById('f1').onsubmit = function() {
        findString(this.t1.value);
        return false;
      };
    });









    // call get_dir when selection is made
    function getDir(newpath) {
      ipcRenderer.send('get_dir', `${newpath}`);
    }

    function sortBy(key, asc) {
      return ((a,b) => {
        var valA = $(a).data(key);
        var valB = $(b).data(key);
        if (valA < valB) {
          return asc ? -1 : 1;
        }
        if (valA > valB) {
          return asc ? 1 : -1;
        }
        return 0;
      });
    }


    //when dir listing comes back, list it
    ipcRenderer.on('get_dir', (event, arg) => {
      console.log("get_dir msg came: ");
      $("#listTable tbody").html('');
      if (arg.success) {
        $("#path").html(arg.path);
        loadDir(arg.path, arg.list);
        fixIcons();
      }
    });

    function loadDir(path, list) {
      let UpDir=path.substr(0, path.lastIndexOf("/"));
      $("#listTable tbody").append(`<tr><td class="browse-folder "><a onclick="getDir('${UpDir}')"><i class=\"fa fa-folder-o\" aria-hidden=\"true\"></i> &nbsp;../ (up one directory)</a><td></tr>`)
      $("#browseCardBody").html('');
      for (item in list) {
        let name=list[item].name
        fullPath = list[item].filePath.replace("\\", "/").replace("", ":")


        if (list[item].isFile) {
          if (list[item].name.endsWith(".apk")) {
            row = $("#listTable tbody").append("<tr><td><a onclick='getDir(\"" + fullPath+ "\")'><b><i class=\"browse-file fa fa-upload\" aria-hidden=\"true\"></i> &nbsp;" + `${name}</b></a><td></tr>`)
          }else{
            row = $("#listTable tbody").append("<tr><td><i class=\"browse-file fa fa-file-o\" aria-hidden=\"true\"></i> &nbsp;" + `${name}<td></tr>`)
          }
        } else {
          if (list[item].imagePath) {

            if (list[item].mp) {
              mpribbon = `<div class="ribbon-wrapper-green"><div class="ribbon-green">MP!</div></div>`
            } else {
              mpribbon = ''
            }

            if (list[item].versionCode !== 'PROCESSING') {
              selectBtn = `<a onclick='getDir("${fullPath}")'><span class="btn btn-outline-secondary btn-block">select</span></a>`
            } else {
              selectBtn = `<a><span class="btn btn-outline-secondary btn-block">${list[item].versionCode}</span></a>`
            }

            //row = $("#listTable tbody").append("<tr><td class='browse-folder' ><a onclick='getDir(\"" + fullPath + "\")'><i class=\"fa fa-folder-o\" aria-hidden=\"true\"></i> &nbsp;" + `${name}</a><td></tr>`)
            row = $("#browseCardBody").append(`<div class="col mb-4 listitem" data-name="${list[item].name.toUpperCase()}" data-createdat="${list[item].createdAt.getTime()}">
          <div class="card h-100">

            ${mpribbon}

            {# <a href="${list[item].infoLink}" target=_blank> #}
<img src="${list[item].imagePath}" style="max-height: 100px" class="card-img-top" alt="...">
{# </a> #}
            <div class="card-body">

              <p class="card-text" style="color: black">
${list[item].simpleName}<br><br>

${selectBtn}


</p>
            </div>
            <div style="color: gray" class="card-footer">v. ${list[item].versionCode}</div>
            {# <div style="color: gray" class="card-footer">VersionCode: ${list[item].versionCode}</div> #}
          </div>
        </div>`);
           } else {
              row = $("#listTable tbody").append("<tr><td class='browse-folder' ><a onclick='getDir(\"" + fullPath + "\")'><i class=\"fa fa-folder-o\" aria-hidden=\"true\"></i> &nbsp;" + `${name}</a><td></tr>`)
           }

        }
        //console.log("appended "+ name);
      }

      $("#browseCardBody .listitem").sort(sortBy('createdat', false)).appendTo('#browseCardBody');

      $("#listTable tbody").append(`<tr><td class="browse-folder "><a onclick="getDir('${UpDir}')"><i class=\"browse-folder fa fa-folder-o\" aria-hidden=\"true\"></i> &nbsp;../ (up one directory)</a><td></tr>`)
    }

  $(document).on('click', '.set-sort', (el) => {
    $("#browseCardBody .listitem").sort(sortBy($(el.target).data('key'), $(el.target).data('asc') == '1')).appendTo('#browseCardBody');
  });

  </script>
{% endblock %}


{% block body %}


  <div class="container">
    <img width="75%" class="screen" >
  </div>

  <div class="card text-white bg-secondary">
    <div class="card-header">
      <h2 class="pull-left push-left">Browsing <b><u id="path"></u></b></h2>
      <h2 class="pull-right push-right"><span id="mountBadge" class="badge badge-warning badge-md">Drive not mounted, browsing local content only</span></h2>
    </div>
    <div class="card-body">
      <p class="card-text">

      <form name="f1" id="f1" action="">
        <div class="input-group">
          <input  class="form-control"  placeholder="Type a word and find occurrences using [ENTER]" type="text" name="t1" value="" />
          <div class="input-group-append">
            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Sort</button>
            <div class="dropdown-menu">
              <a class="dropdown-item set-sort" href="#" data-key="createdat" data-asc="0">Sort by update decending</a>
              <a class="dropdown-item set-sort" href="#" data-key="createdat" data-asc="1">Sort by update</a>
              <a class="dropdown-item set-sort" href="#" data-key="name" data-asc="1">Sort by name</a>
              <a class="dropdown-item set-sort" href="#" data-key="name" data-asc="0">Sort by name decending</a>
            </div>
          </div>
        </div>
      </form>
      <br>

      <div id="browseCardBody" class="row row-cols-2 row-cols-md-6" style="font-size: smaller">

      </div>



      <table class="table table-striped table-condensed" id="listTable">
        <tbody>

        </tbody>
      </table>



      </p>
    </div>
  </div>












{% endblock %}
